function normalizeOrigins(originOption) {
  if (!originOption) return null;
  if (Array.isArray(originOption)) return originOption;
  return [originOption];
}

function matchOrigin(origin, patterns) {
  if (!origin || !patterns || !patterns.length) return false;
  return patterns.some((pattern) => {
    if (pattern instanceof RegExp) return pattern.test(origin);
    if (typeof pattern === "string") return pattern === origin;
    if (typeof pattern === "function") return !!pattern(origin);
    return false;
  });
}

function cors(options = {}) {
  const origins = normalizeOrigins(options.origin);
  const allowCredentials = options.credentials === true;
  const allowMethods = options.methods || "GET,HEAD,PUT,PATCH,POST,DELETE";

  return function corsMiddleware(req, res, next) {
    const origin = req.headers.origin;
    let allowedOrigin = null;
    if (!origin) {
      allowedOrigin = null;
    } else if (!origins || origins.length === 0) {
      allowedOrigin = origin;
    } else if (matchOrigin(origin, origins)) {
      allowedOrigin = origin;
    }

    if (allowedOrigin) {
      res.setHeader("Access-Control-Allow-Origin", allowedOrigin);
      if (allowCredentials) {
        res.setHeader("Access-Control-Allow-Credentials", "true");
      }
    }

    if (req.method === "OPTIONS") {
      res.setHeader("Access-Control-Allow-Methods", allowMethods);
      const reqHeaders = req.headers["access-control-request-headers"];
      if (reqHeaders) {
        res.setHeader("Access-Control-Allow-Headers", reqHeaders);
      }
      res.statusCode = res.statusCode || 204;
      res.end();
      return;
    }

    next();
  };
}

module.exports = cors;
module.exports.default = cors;
